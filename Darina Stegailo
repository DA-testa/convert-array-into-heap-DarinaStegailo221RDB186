# python3

def build_heap(data):
    swaps = []
    n = len(data)

    for i in range(n // 2 - 1, -1, -1):
        swaps += heapify(data, i)
    return swaps

def heapify(data, i):
    swaps = []
    n = len(data)
    while True:
        min_idx = i
        l = 2 * i + 1
        r = 2 * i + 2
        if l < n and data[l] < data[min_idx]:
            min_idx = l
        if r < n and data[r] < data[min_idx]:
            min_idx = r
        if i != min_idx:
            swaps.append((i, min_idx))
            data[i], data[min_idx] = data[min_idx], data[i]
            i = min_idx
        else:
            break

    return swaps


def main():
    text = input("I or F: ")
    if "I" in text:
        n = int(input())
        data = list(map(int, input().split()))
        assert len(data) == n
        swaps = build_heap(data)
        print(len(swaps))
        for i, j in swaps:
            print(i, j)
    
    elif "F" in text:
        f = input()
        test ='./test/'
        file = test+f
        with open(file) as x:
            n = int(x.readline())
            data = list(map(int,x.readline().split()))
        else:
            print("Error")   

    assert len(data) == n
    swaps = build_heap(data)
    print(len(swaps))
    for i, j in swaps:
        print(i, j)
    return    
       
if __name__ == "__main__":
    main()
